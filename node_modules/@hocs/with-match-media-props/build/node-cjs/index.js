"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _reactDisplayName = _interopRequireDefault(require("react-display-name"));

var _json2mq = _interopRequireDefault(require("json2mq"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const isMatchMediaSupported = typeof global.matchMedia === 'function';

const queryToMql = query => global.matchMedia((0, _json2mq.default)(query));

const createMediaMatcher = query => {
  const mql = queryToMql(query);
  return {
    matches: mql.matches,

    subscribe(handler) {
      mql.addListener(handler);
      return () => mql.removeListener(handler);
    }

  };
};

const withMatchMediaProps = (propsQieries = {}) => Target => {
  if (!isMatchMediaSupported) {
    return Target;
  }

  class WithMatchMediaProps extends _react.Component {
    constructor(props, context) {
      super(props, context);
      this.propsMatchers = Object.keys(propsQieries).map(prop => _objectSpread({
        prop
      }, createMediaMatcher(propsQieries[prop])));
      this.state = this.propsMatchers.reduce((result, propMatcher) => _objectSpread({}, result, {
        [propMatcher.prop]: propMatcher.matches
      }), {});
    }

    componentDidMount() {
      this.unsubscribers = this.propsMatchers.map(propMatcher => propMatcher.subscribe(e => {
        this.setState({
          [propMatcher.prop]: e.matches
        });
      }));
    }

    componentWillUnmount() {
      this.unsubscribers.forEach(unsubscribe => unsubscribe());
    }

    render() {
      return (0, _react.createElement)(Target, _objectSpread({}, this.props, this.state));
    }

  }

  if (process.env.NODE_ENV !== 'production') {
    WithMatchMediaProps.displayName = `withMatchMediaProps(${(0, _reactDisplayName.default)(Target)})`;
  }

  return WithMatchMediaProps;
};

var _default = withMatchMediaProps;
exports.default = _default;